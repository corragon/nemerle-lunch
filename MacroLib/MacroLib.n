using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace MacroLib
{
   public macro It'sMyTimeNow() {
      <[$"We're at now now: $(DateTime.Now)"]>
   }
   
   public macro @completelyIgnore(body)
   syntax ("ignore", body)
   {
      <[
      try {
         $body
      }
      catch {
         | _ => ()
      }
      ]>
   }
      
   public macro @because(cond, body)
   syntax ("because", "(", cond, ")", body)
   {
      <[ 
      match ($cond)
      {
         | true => $body : void
         | _ => ()
      }
      ]>
   }

   public macro @hl7(segment : string)
   syntax ("hl7", ".", segment)
   {   
      // aka, superFancyRegexThatStephenWrote
      def reg = Regex(@"^(?<segmentName>[A-Z]{3})(?:(?:\[(?<segmentIndex>(?:\d+)|(?:[A-Z]{3}))\])?(?:\.(?<fieldNumber>\d+)(?:\[(?<fieldRepetition>\d+)\])?(?:\.(?<component>\d+)(?:\.(?<subComponent>\d+))?)?)?)?$", RegexOptions.Compiled);
      def m = reg.Match(segment);

      unless (m.Success)
         throw ArgumentException();
      
      def segment = m.Groups[reg.GroupNumberFromName("segmentName")].Value;
      def segIndexRaw = m.Groups[reg.GroupNumberFromName("segmentIndex")].Value;
      def fieldNumRaw = m.Groups[reg.GroupNumberFromName("fieldNumber")].Value;
      def fieldRepRaw = m.Groups[reg.GroupNumberFromName("fieldRepetition")].Value;
      def componentRaw = m.Groups[reg.GroupNumberFromName("component")].Value;
      def subComponentRaw = m.Groups[reg.GroupNumberFromName("subComponent")].Value;
      
      mutable segIndex;
      mutable fieldNum;
      mutable fieldRep;
      mutable component;
      mutable subComponent;
      
      unless(Int32.TryParse(segIndexRaw, out segIndex))
         segIndex = 0;
      unless(Int32.TryParse(fieldNumRaw, out fieldNum))
         fieldNum = 1;
      unless(Int32.TryParse(fieldRepRaw, out fieldRep))
         fieldRep = 0;
      unless(Int32.TryParse(componentRaw, out component))
         component = 1;
      unless(Int32.TryParse(subComponentRaw, out subComponent))
         subComponent = 1;

      <[ ContrivedHl7.MessageParser.GetValue($segment, $segIndex, $fieldNum, $fieldRep, $component, $subComponent); ]>
   }
}
