using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Console;
using System.Collections.Generic;
using System.Linq;

using MacroLib;

namespace Nemerle_Lunch
{
   module Macros
   {
      public Example() : void
      {
         // "The first rule about . . [macros] is: don't use them if you do not have to. . . 
         //almost every macro demonstrates a flaw in either 
         //the programming language or in the program."
         // --Bjarne Stroustrup
         //http://www.idinews.com/macroPhobe.html
         
         // At the beginning of their section on macros, the authors
         //(of the wiki at least) give this warning about the use of macros:
         //http://nemerle.org/wiki/index.php?title=Macros_-_extended_course._Part_1#Warning

         // TLDR version
         // Macros are great, but too much use is very bad
         // ONLY use a macro when nothing else will satisfy
         //
         // They might be good...
         // When you need to generate lots of obnoxious template code
         // When some complexity could be reduced by using simple DSL
         // When you want automation provided by the compiler's API
         // When you miss a construct that helps safety or is concise
         
         // Examples
         //Long: https://github.com/rsdn/nemerle/blob/master/macros/core.n#L507
         //Simple: https://github.com/rsdn/nemerle/blob/master/macros/core.n#L320
         
         WriteLine("\nBecause: probably not useful...");
         because ( true == true )
         {
            WriteLine("The universe is still intact!");
         }
         
         repeat(2) WriteLine();
         
         WriteLine(It'sMyTimeNow());
         
         repeat(2) WriteLine();
        
         ignore {
            throw Exception("This will be ignored");
         }
         
         // Compile-time parsing of strings into obnoxious syntax
         ContrivedHL7();
         
         // Other possibilities!
         //http://nemerle.org/wiki/index.php?title=MacroUse
         // Design by contract 
         // Compile-time validation of SQL or Regexes (embedded languages)
         // Partial evaulation of functions
         // Concurrency constructs https://github.com/rsdn/nemerle/blob/master/snippets/concurrency
         // Design patterns
         // Aspect-oriented programming
      }

      ContrivedHL7() : void
      {
         WriteLine("Completely and absolutely contrived HL7 parsing example:");
         
         def _reallyBadWayOfGettingHl7 = ContrivedHl7.MessageParser.GetValue("OBR", 2, 3, 1, 2, 5);
         
         def _hideousWayOfGettingHl7 = ContrivedHl7.MessageParser.GetValue(name = "OBR", index = 2, field = 3, repetition = 1, component = 2, subcomp = 5);
         
         def prettyWayOfGettingHl7Values1 = hl7."OBR[2].3[1].2.5";
         def prettyWayOfGettingHl7Values2 = hl7."PID.3.5";
         
         WriteLine();
         WriteLine(prettyWayOfGettingHl7Values1);
         
         WriteLine();
         WriteLine(prettyWayOfGettingHl7Values2);
      }

   }
}
